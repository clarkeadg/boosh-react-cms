'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INITIAL_STATE = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _ACTION_HANDLERS;

var _Types = require('../Actions/Types');

var _Types2 = _interopRequireDefault(_Types);

var _seamlessImmutable = require('seamless-immutable');

var _seamlessImmutable2 = _interopRequireDefault(_seamlessImmutable);

var _reduxsauce = require('reduxsauce');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INITIAL_STATE = exports.INITIAL_STATE = (0, _seamlessImmutable2.default)({
  entities: {},
  result: [],
  errorCode: null,
  attempting: false
});

// request
var attempt = function attempt(state, action) {
  return state.merge({ attempting: true });
};

// recieve
var success = function success(state, action) {
  return state.merge({
    attempting: false,
    errorCode: null,
    entities: state.entities.merge(action.payload.entities.apps),
    result: action.payload.result
  });
};

// fail
var failure = function failure(state, action) {
  return state.merge({ attempting: false, errorCode: action.errorCode });
};

// map our types to our handlers
var ACTION_HANDLERS = (_ACTION_HANDLERS = {}, (0, _defineProperty3.default)(_ACTION_HANDLERS, _Types2.default.GET_CMS_APP_REQUEST, attempt), (0, _defineProperty3.default)(_ACTION_HANDLERS, _Types2.default.GET_CMS_APP_SUCCESS, success), (0, _defineProperty3.default)(_ACTION_HANDLERS, _Types2.default.GET_CMS_APP_FAILURE, failure), _ACTION_HANDLERS);

exports.default = (0, _reduxsauce.createReducer)(INITIAL_STATE, ACTION_HANDLERS);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9SZWR1Y2Vycy9DbXNBcHBSZWR1Y2VyLmpzIl0sIm5hbWVzIjpbIklOSVRJQUxfU1RBVEUiLCJlbnRpdGllcyIsInJlc3VsdCIsImVycm9yQ29kZSIsImF0dGVtcHRpbmciLCJhdHRlbXB0Iiwic3RhdGUiLCJhY3Rpb24iLCJtZXJnZSIsInN1Y2Nlc3MiLCJwYXlsb2FkIiwiYXBwcyIsImZhaWx1cmUiLCJBQ1RJT05fSEFORExFUlMiLCJHRVRfQ01TX0FQUF9SRVFVRVNUIiwiR0VUX0NNU19BUFBfU1VDQ0VTUyIsIkdFVF9DTVNfQVBQX0ZBSUxVUkUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFTyxJQUFNQSx3Q0FBZ0IsaUNBQVU7QUFDckNDLFlBQVUsRUFEMkI7QUFFckNDLFVBQVEsRUFGNkI7QUFHckNDLGFBQVcsSUFIMEI7QUFJckNDLGNBQVk7QUFKeUIsQ0FBVixDQUF0Qjs7QUFPUDtBQUNBLElBQU1DLFVBQVUsU0FBVkEsT0FBVSxDQUFDQyxLQUFELEVBQVFDLE1BQVI7QUFBQSxTQUNkRCxNQUFNRSxLQUFOLENBQVksRUFBRUosWUFBWSxJQUFkLEVBQVosQ0FEYztBQUFBLENBQWhCOztBQUdBO0FBQ0EsSUFBTUssVUFBVSxTQUFWQSxPQUFVLENBQUNILEtBQUQsRUFBUUMsTUFBUixFQUFtQjtBQUNqQyxTQUFPRCxNQUFNRSxLQUFOLENBQVk7QUFDakJKLGdCQUFZLEtBREs7QUFFakJELGVBQVcsSUFGTTtBQUdqQkYsY0FBVUssTUFBTUwsUUFBTixDQUFlTyxLQUFmLENBQXFCRCxPQUFPRyxPQUFQLENBQWVULFFBQWYsQ0FBd0JVLElBQTdDLENBSE87QUFJakJULFlBQVFLLE9BQU9HLE9BQVAsQ0FBZVI7QUFKTixHQUFaLENBQVA7QUFNRCxDQVBEOztBQVNBO0FBQ0EsSUFBTVUsVUFBVSxTQUFWQSxPQUFVLENBQUNOLEtBQUQsRUFBUUMsTUFBUjtBQUFBLFNBQ2RELE1BQU1FLEtBQU4sQ0FBWSxFQUFFSixZQUFZLEtBQWQsRUFBcUJELFdBQVdJLE9BQU9KLFNBQXZDLEVBQVosQ0FEYztBQUFBLENBQWhCOztBQUdBO0FBQ0EsSUFBTVUsMEZBQ0gsZ0JBQU1DLG1CQURILEVBQ3lCVCxPQUR6QixtREFFSCxnQkFBTVUsbUJBRkgsRUFFeUJOLE9BRnpCLG1EQUdILGdCQUFNTyxtQkFISCxFQUd5QkosT0FIekIsb0JBQU47O2tCQU1lLCtCQUFjWixhQUFkLEVBQTZCYSxlQUE3QixDIiwiZmlsZSI6IkNtc0FwcFJlZHVjZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVHlwZXMgZnJvbSAnLi4vQWN0aW9ucy9UeXBlcydcbmltcG9ydCBJbW11dGFibGUgZnJvbSAnc2VhbWxlc3MtaW1tdXRhYmxlJ1xuaW1wb3J0IHsgY3JlYXRlUmVkdWNlciB9IGZyb20gJ3JlZHV4c2F1Y2UnXG5cbmV4cG9ydCBjb25zdCBJTklUSUFMX1NUQVRFID0gSW1tdXRhYmxlKHtcbiAgZW50aXRpZXM6IHt9LFxuICByZXN1bHQ6IFtdLFxuICBlcnJvckNvZGU6IG51bGwsXG4gIGF0dGVtcHRpbmc6IGZhbHNlXG59KVxuXG4vLyByZXF1ZXN0XG5jb25zdCBhdHRlbXB0ID0gKHN0YXRlLCBhY3Rpb24pID0+XG4gIHN0YXRlLm1lcmdlKHsgYXR0ZW1wdGluZzogdHJ1ZSB9KVxuXG4vLyByZWNpZXZlXG5jb25zdCBzdWNjZXNzID0gKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIHN0YXRlLm1lcmdlKHtcbiAgICBhdHRlbXB0aW5nOiBmYWxzZSxcbiAgICBlcnJvckNvZGU6IG51bGwsXG4gICAgZW50aXRpZXM6IHN0YXRlLmVudGl0aWVzLm1lcmdlKGFjdGlvbi5wYXlsb2FkLmVudGl0aWVzLmFwcHMpLFxuICAgIHJlc3VsdDogYWN0aW9uLnBheWxvYWQucmVzdWx0XG4gIH0pXG59XG5cbi8vIGZhaWxcbmNvbnN0IGZhaWx1cmUgPSAoc3RhdGUsIGFjdGlvbikgPT5cbiAgc3RhdGUubWVyZ2UoeyBhdHRlbXB0aW5nOiBmYWxzZSwgZXJyb3JDb2RlOiBhY3Rpb24uZXJyb3JDb2RlIH0pXG5cbi8vIG1hcCBvdXIgdHlwZXMgdG8gb3VyIGhhbmRsZXJzXG5jb25zdCBBQ1RJT05fSEFORExFUlMgPSB7XG4gIFtUeXBlcy5HRVRfQ01TX0FQUF9SRVFVRVNUXTogYXR0ZW1wdCxcbiAgW1R5cGVzLkdFVF9DTVNfQVBQX1NVQ0NFU1NdOiBzdWNjZXNzLFxuICBbVHlwZXMuR0VUX0NNU19BUFBfRkFJTFVSRV06IGZhaWx1cmVcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUmVkdWNlcihJTklUSUFMX1NUQVRFLCBBQ1RJT05fSEFORExFUlMpXG4iXX0=