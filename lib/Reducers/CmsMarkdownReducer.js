'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INITIAL_STATE = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _ACTION_HANDLERS;

var _Types = require('../Actions/Types');

var _Types2 = _interopRequireDefault(_Types);

var _seamlessImmutable = require('seamless-immutable');

var _seamlessImmutable2 = _interopRequireDefault(_seamlessImmutable);

var _reduxsauce = require('reduxsauce');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INITIAL_STATE = exports.INITIAL_STATE = (0, _seamlessImmutable2.default)({
  entities: {},
  result: [],
  errorCode: null,
  attempting: false
});

// request
var attempt = function attempt(state, action) {
  return state.merge({ attempting: true });
};

// recieve
var success = function success(state, action) {
  return state.merge({
    attempting: false,
    errorCode: null,
    entities: state.entities.merge(action.payload.entities.markdowns),
    result: action.payload.result
  });
};

// fail
var failure = function failure(state, action) {
  return state.merge({ attempting: false, errorCode: action.errorCode });
};

// map our types to our handlers
var ACTION_HANDLERS = (_ACTION_HANDLERS = {}, (0, _defineProperty3.default)(_ACTION_HANDLERS, _Types2.default.GET_CMS_MARKDOWN_REQUEST, attempt), (0, _defineProperty3.default)(_ACTION_HANDLERS, _Types2.default.GET_CMS_MARKDOWN_SUCCESS, success), (0, _defineProperty3.default)(_ACTION_HANDLERS, _Types2.default.GET_CMS_MARKDOWN_FAILURE, failure), _ACTION_HANDLERS);

exports.default = (0, _reduxsauce.createReducer)(INITIAL_STATE, ACTION_HANDLERS);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9SZWR1Y2Vycy9DbXNNYXJrZG93blJlZHVjZXIuanMiXSwibmFtZXMiOlsiSU5JVElBTF9TVEFURSIsImVudGl0aWVzIiwicmVzdWx0IiwiZXJyb3JDb2RlIiwiYXR0ZW1wdGluZyIsImF0dGVtcHQiLCJzdGF0ZSIsImFjdGlvbiIsIm1lcmdlIiwic3VjY2VzcyIsInBheWxvYWQiLCJtYXJrZG93bnMiLCJmYWlsdXJlIiwiQUNUSU9OX0hBTkRMRVJTIiwiR0VUX0NNU19NQVJLRE9XTl9SRVFVRVNUIiwiR0VUX0NNU19NQVJLRE9XTl9TVUNDRVNTIiwiR0VUX0NNU19NQVJLRE9XTl9GQUlMVVJFIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRU8sSUFBTUEsd0NBQWdCLGlDQUFVO0FBQ3JDQyxZQUFVLEVBRDJCO0FBRXJDQyxVQUFRLEVBRjZCO0FBR3JDQyxhQUFXLElBSDBCO0FBSXJDQyxjQUFZO0FBSnlCLENBQVYsQ0FBdEI7O0FBT1A7QUFDQSxJQUFNQyxVQUFVLFNBQVZBLE9BQVUsQ0FBQ0MsS0FBRCxFQUFRQyxNQUFSO0FBQUEsU0FDZEQsTUFBTUUsS0FBTixDQUFZLEVBQUVKLFlBQVksSUFBZCxFQUFaLENBRGM7QUFBQSxDQUFoQjs7QUFHQTtBQUNBLElBQU1LLFVBQVUsU0FBVkEsT0FBVSxDQUFDSCxLQUFELEVBQVFDLE1BQVIsRUFBbUI7QUFDakMsU0FBT0QsTUFBTUUsS0FBTixDQUFZO0FBQ2pCSixnQkFBWSxLQURLO0FBRWpCRCxlQUFXLElBRk07QUFHakJGLGNBQVVLLE1BQU1MLFFBQU4sQ0FBZU8sS0FBZixDQUFxQkQsT0FBT0csT0FBUCxDQUFlVCxRQUFmLENBQXdCVSxTQUE3QyxDQUhPO0FBSWpCVCxZQUFRSyxPQUFPRyxPQUFQLENBQWVSO0FBSk4sR0FBWixDQUFQO0FBTUQsQ0FQRDs7QUFTQTtBQUNBLElBQU1VLFVBQVUsU0FBVkEsT0FBVSxDQUFDTixLQUFELEVBQVFDLE1BQVI7QUFBQSxTQUNkRCxNQUFNRSxLQUFOLENBQVksRUFBRUosWUFBWSxLQUFkLEVBQXFCRCxXQUFXSSxPQUFPSixTQUF2QyxFQUFaLENBRGM7QUFBQSxDQUFoQjs7QUFHQTtBQUNBLElBQU1VLDBGQUNILGdCQUFNQyx3QkFESCxFQUM4QlQsT0FEOUIsbURBRUgsZ0JBQU1VLHdCQUZILEVBRThCTixPQUY5QixtREFHSCxnQkFBTU8sd0JBSEgsRUFHOEJKLE9BSDlCLG9CQUFOOztrQkFNZSwrQkFBY1osYUFBZCxFQUE2QmEsZUFBN0IsQyIsImZpbGUiOiJDbXNNYXJrZG93blJlZHVjZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVHlwZXMgZnJvbSAnLi4vQWN0aW9ucy9UeXBlcydcbmltcG9ydCBJbW11dGFibGUgZnJvbSAnc2VhbWxlc3MtaW1tdXRhYmxlJ1xuaW1wb3J0IHsgY3JlYXRlUmVkdWNlciB9IGZyb20gJ3JlZHV4c2F1Y2UnXG5cbmV4cG9ydCBjb25zdCBJTklUSUFMX1NUQVRFID0gSW1tdXRhYmxlKHtcbiAgZW50aXRpZXM6IHt9LFxuICByZXN1bHQ6IFtdLFxuICBlcnJvckNvZGU6IG51bGwsXG4gIGF0dGVtcHRpbmc6IGZhbHNlXG59KVxuXG4vLyByZXF1ZXN0XG5jb25zdCBhdHRlbXB0ID0gKHN0YXRlLCBhY3Rpb24pID0+XG4gIHN0YXRlLm1lcmdlKHsgYXR0ZW1wdGluZzogdHJ1ZSB9KVxuXG4vLyByZWNpZXZlXG5jb25zdCBzdWNjZXNzID0gKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgcmV0dXJuIHN0YXRlLm1lcmdlKHtcbiAgICBhdHRlbXB0aW5nOiBmYWxzZSxcbiAgICBlcnJvckNvZGU6IG51bGwsXG4gICAgZW50aXRpZXM6IHN0YXRlLmVudGl0aWVzLm1lcmdlKGFjdGlvbi5wYXlsb2FkLmVudGl0aWVzLm1hcmtkb3ducyksXG4gICAgcmVzdWx0OiBhY3Rpb24ucGF5bG9hZC5yZXN1bHRcbiAgfSlcbn1cblxuLy8gZmFpbFxuY29uc3QgZmFpbHVyZSA9IChzdGF0ZSwgYWN0aW9uKSA9PlxuICBzdGF0ZS5tZXJnZSh7IGF0dGVtcHRpbmc6IGZhbHNlLCBlcnJvckNvZGU6IGFjdGlvbi5lcnJvckNvZGUgfSlcblxuLy8gbWFwIG91ciB0eXBlcyB0byBvdXIgaGFuZGxlcnNcbmNvbnN0IEFDVElPTl9IQU5ETEVSUyA9IHtcbiAgW1R5cGVzLkdFVF9DTVNfTUFSS0RPV05fUkVRVUVTVF06IGF0dGVtcHQsXG4gIFtUeXBlcy5HRVRfQ01TX01BUktET1dOX1NVQ0NFU1NdOiBzdWNjZXNzLFxuICBbVHlwZXMuR0VUX0NNU19NQVJLRE9XTl9GQUlMVVJFXTogZmFpbHVyZVxufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVSZWR1Y2VyKElOSVRJQUxfU1RBVEUsIEFDVElPTl9IQU5ETEVSUylcbiJdfQ==